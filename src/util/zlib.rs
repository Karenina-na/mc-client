use flate2::write::ZlibEncoder;
use flate2::Compression;
use std::io::Write;

#[allow(dead_code)]
pub fn compress(data: Vec<u8>) -> Vec<u8> {
    let mut e = ZlibEncoder::new(Vec::new(), Compression::default());
    e.write_all(&data).unwrap();
    e.finish().unwrap()
}

#[allow(dead_code)]
pub fn decompress(data: Vec<u8>) -> Vec<u8> {
    let mut d = flate2::write::ZlibDecoder::new(Vec::new());
    d.write_all(&data).unwrap();
    d.finish().unwrap()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_compress() {
        let data = vec![
            0x02, 0x03, 0x7F, 0x56, 0x95, 0xCC, 0x30, 0x39, 0x64, 0x9C, 0xAF, 0x8C, 0x00, 0x0E,
            0x10, 0x7C, 0x14, 0x08, 0x4B, 0x61, 0x72, 0x65, 0x6E, 0x69, 0x6E, 0x61, 0x00,
        ];
        let compressed = compress(data);
        assert_eq!(
            compressed,
            vec![
                0x78, 0x9c, 0x63, 0x62, 0xae, 0x0f, 0x9b, 0x7a, 0xc6, 0xc0, 0x32, 0x65, 0xce, 0xfa,
                0x1e, 0x06, 0x3e, 0x81, 0x1a, 0x11, 0x0e, 0xef, 0xc4, 0xa2, 0xd4, 0xbc, 0xcc, 0xbc,
                0x44, 0x06, 0x00, 0x7c, 0xb5, 0x08, 0xbf
            ]
        );
    }

    #[test]
    fn test_decompress() {
        let data = vec![
            0x78, 0x9c, 0x63, 0x62, 0xae, 0x0f, 0x9b, 0x7a, 0xc6, 0xc0, 0x32, 0x65, 0xce, 0xfa,
            0x1e, 0x06, 0x3e, 0x81, 0x1a, 0x11, 0x0e, 0xef, 0xc4, 0xa2, 0xd4, 0xbc, 0xcc, 0xbc,
            0x44, 0x06, 0x00, 0x7c, 0xb5, 0x08, 0xbf,
        ];
        let decompressed = decompress(data);
        assert_eq!(decompressed[0], 0x02);
        assert_eq!(
            decompressed[1..],
            vec![
                0x03, 0x7F, 0x56, 0x95, 0xCC, 0x30, 0x39, 0x64, 0x9C, 0xAF, 0x8C, 0x00, 0x0E, 0x10,
                0x7C, 0x14, 0x08, 0x4B, 0x61, 0x72, 0x65, 0x6E, 0x69, 0x6E, 0x61, 0x00,
            ]
        );
    }
}
