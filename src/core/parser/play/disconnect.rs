use log::error;

pub fn parse(pkt: Vec<u8>) -> String {
    let data_n_num = crate::util::split::get_var_int_num(pkt.clone(), 1);
    let data_n =
        crate::util::transfer_var::var_int2uint(pkt[0..data_n_num[0]].to_vec())[0] as usize;
    String::from_utf8(pkt[1..data_n + 1].to_vec()).unwrap_or_else(|e| {
        error!("Error: {}", e);
        String::from("")
    })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parse() {
        let pkt = vec![
            0x36, 0x7b, 0x22, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x74,
            0x65, 0x78, 0x74, 0x22, 0x3a, 0x22, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x62,
            0x79, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
            0x7d, 0x5d, 0x2c, 0x22, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3a, 0x22, 0x22, 0x7d,
        ];
        let data = parse(pkt);
        assert_eq!(
            data,
            "{\"extra\":[{\"text\":\"Kicked by an operator\"}],\"text\":\"\"}"
        );
    }
}
